<?xml version='1.0'?>

<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0"
  xmlns:exsl="http://exslt.org/common"
  xmlns:str="http://exslt.org/strings"
  extension-element-prefixes="exsl str"
>

  <xsl:output method="text" encoding="UTF-8"/>

  <!-- JSON Escaped Strings -->
  <!-- stolen from PreTeXt -->
  <xsl:template name="escape-json-string">
    <xsl:param name="text"/>
    <xsl:variable name="sans-backslash" select="str:replace($text,           '\',      '\\'     )"/>
    <xsl:variable name="sans-slash"     select="str:replace($sans-backslash, '/',      '\/'     )"/>
    <xsl:variable name="sans-quote"     select="str:replace($sans-slash,     '&#x22;', '\&#x22;')"/>
    <xsl:variable name="sans-tab"       select="str:replace($sans-quote,     '&#x09;', '\t'     )"/>
    <xsl:variable name="sans-newline"   select="str:replace($sans-tab,       '&#x0a;', '\n'     )"/>
    <xsl:variable name="sans-return"    select="str:replace($sans-newline,   '&#x0d;', '\r'     )"/>
    <xsl:value-of select="$sans-return" />
  </xsl:template>

  <xsl:template match="/">
    {"cells": [
      {
       "cell_type": "markdown",
       "metadata": {
        "collapsed": false,
        "editable": false
       },
       "source": [
          "# (Section No.) (Title goes here)"
       ]
      }
      ,
      <xsl:apply-templates select="activity|exploration"/>
    ]}
  </xsl:template>

  <xsl:template match="activity|exploration">
    <xsl:apply-templates select="statement"/>
  </xsl:template>

  <xsl:template match="statement">
      {
       "cell_type": "markdown",
       "metadata": {
        "collapsed": false,
        "editable": false
       },
       "source": [
          "## (Preview) Activity (No.)"
       ]
      }
      ,
    <xsl:apply-templates select="*"/>
  </xsl:template>

  <xsl:template match="p">
    <xsl:choose>
      <xsl:when test="text()[normalize-space()]">
        {
         "cell_type": "markdown",
         "metadata": {
          "collapsed": false,
          "editable": false
         },
         "source": [
            "<xsl:apply-templates select="." mode="markdown"/>"
         ]
        }
      </xsl:when>
      <xsl:otherwise>
        <xsl:apply-templates select="*"/>
      </xsl:otherwise>
    </xsl:choose>
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>
  <xsl:template match="p" mode="markdown"><xsl:apply-templates select="m|text()"/></xsl:template>

  <xsl:template match="sidebyside|ol|ul">
    <xsl:apply-templates select="*"/>
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>

  <xsl:template match="li">
    {
     "cell_type": "markdown",
     "metadata": {
      "collapsed": false,
      "editable": false
     },
     "source": [
        "<xsl:number format="a. "/> <xsl:apply-templates select="*[position()=1]" mode="markdown"/>"
     ]
    }
    ,
    <xsl:if test="*[position()>1]"><xsl:apply-templates select="*[position()>1]"/>,</xsl:if>
    {
     "cell_type": "markdown",
     "metadata": {
      "collapsed": false,
      "editable": true
     },
     "source": "&lt;span style=\"color:#ccc\"&gt;Enter solution here.&lt;/span&gt;"
    }
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>

  <xsl:template match="image">
    {
     "cell_type": "markdown",
     "metadata": {
      "collapsed": false,
      "editable": false
     },
     "source": [
        "&lt;img src=\"apc/src/<xsl:value-of select="@source"/>.svg\"/&gt;"
     ]
    }
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>


  <xsl:template match="figure">
    {
     "cell_type": "markdown",
     "metadata": {
      "collapsed": false,
      "editable": false
     },
     "source": [
        "&lt;img src=\"apc/src/<xsl:value-of select="image/@source"/>.svg\"/&gt;\n\n",
        "<xsl:apply-templates select="caption"/>"
     ]
    }
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>

  <xsl:template match="table">
    {
     "cell_type": "markdown",
     "metadata": {
      "collapsed": false,
      "editable": false
     },
     "source": [
        "&lt;table&gt;<xsl:apply-templates select="tabular/row"/>&lt;/table&gt;\n\n",
        "<xsl:apply-templates select="caption"/>"
     ]
    }
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>
  <xsl:template match="row">&lt;tr&gt;<xsl:apply-templates select="cell"/>&lt;/tr&gt;</xsl:template>
  <xsl:template match="cell">&lt;td&gt;<xsl:call-template name="escape-json-string"><xsl:with-param name="text" select="normalize-space(.)"/></xsl:call-template>&lt;/td&gt;</xsl:template>

  <xsl:template match="figure">
    {
     "cell_type": "markdown",
     "metadata": {
      "collapsed": false,
      "editable": false
     },
     "source": [
        "&lt;img src=\"apc/src/<xsl:value-of select="image/@source"/>.svg\"/&gt;\n\n",
        "<xsl:apply-templates select="caption"/>"
     ]
    }
    <xsl:if test="position() != last()">,</xsl:if>
  </xsl:template>

  <xsl:template match="m"> \\(<xsl:call-template name="escape-json-string"><xsl:with-param name="text" select="normalize-space(.)"/></xsl:call-template>\\) </xsl:template>
  <xsl:template match="text()|caption"><xsl:call-template name="escape-json-string"><xsl:with-param name="text" select="normalize-space(.)"/></xsl:call-template></xsl:template>

</xsl:stylesheet>